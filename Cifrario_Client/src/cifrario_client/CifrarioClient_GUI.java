/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cifrario_client;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author simone2
 */
public class CifrarioClient_GUI extends javax.swing.JFrame {
    private ButtonGroup groupTecnicaCif = new ButtonGroup();
    private Cifrario cifrario=new Cifrario();
    private final int MAX_CARAT=506;
    private Border borderError,borderNormal;
    /**
     * Creates new form CifrarioClient_GUI
     */
    public CifrarioClient_GUI() {
        initComponents();
        borderError = BorderFactory.createLineBorder(Color.red);
        borderNormal = BorderFactory.createLineBorder(Color.black);

        jTextField_IP.setBorder(borderNormal);
        jTextField_Porta.setBorder(borderNormal);
        jTextField_CodAgente.setBorder(borderNormal);
        jTextField_Chiave.setBorder(borderNormal);
        jTextArea_Messaggio.setBorder(borderNormal);        
        //Ragruppo i radio button
        groupTecnicaCif.add(jRadioButton_Cesare);
        groupTecnicaCif.add(jRadioButton_Vigenere);
        //groupTecnicaCif.add(jRadioButton_GiaCod);     
        //groupTecnicaCif.getSelection().getMnemonic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel_Titolo = new javax.swing.JLabel();
        jTextField_IP = new javax.swing.JTextField();
        jLabel_IP = new javax.swing.JLabel();
        jTextField_Porta = new javax.swing.JTextField();
        jLabel_Porta = new javax.swing.JLabel();
        jLabel_CodAgente = new javax.swing.JLabel();
        jTextField_CodAgente = new javax.swing.JTextField();
        jLabel_Chiave = new javax.swing.JLabel();
        jTextField_Chiave = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_Messaggio = new javax.swing.JTextArea();
        jButton_invioMes = new javax.swing.JButton();
        jRadioButton_Vigenere = new javax.swing.JRadioButton();
        jRadioButton_Cesare = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel_caratIns = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_Titolo.setFont(new java.awt.Font("Sitka Heading", 1, 24)); // NOI18N
        jLabel_Titolo.setText("                                 CriptoMania");

        jTextField_IP.setText("localhost");
        jTextField_IP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_IPActionPerformed(evt);
            }
        });

        jLabel_IP.setText("IP");

        jTextField_Porta.setText("7777");

        jLabel_Porta.setText("Porta");

        jLabel_CodAgente.setText("Codice Agente");

        jTextField_CodAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_CodAgenteActionPerformed(evt);
            }
        });

        jLabel_Chiave.setText("Chiave");

        jTextArea_Messaggio.setColumns(20);
        jTextArea_Messaggio.setRows(5);
        jTextArea_Messaggio.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextArea_MessaggioCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_Messaggio);

        jButton_invioMes.setText("Invia");
        jButton_invioMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_invioMesActionPerformed(evt);
            }
        });

        jRadioButton_Vigenere.setText("Cifrario di Vigenere");

        jRadioButton_Cesare.setText("Cifrario di Cesare");

        jLabel1.setText("caratteri inseriti");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jButton_invioMes, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_Titolo, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_IP))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel_Porta)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_Porta, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jTextField_IP)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton_Cesare)
                                .addGap(52, 52, 52)
                                .addComponent(jRadioButton_Vigenere))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_CodAgente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_CodAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel_Chiave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_Chiave, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_caratIns)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Titolo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_IP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_IP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Porta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Porta))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Cesare)
                    .addComponent(jRadioButton_Vigenere))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField_CodAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_CodAgente)
                    .addComponent(jTextField_Chiave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Chiave))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel_caratIns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_invioMes)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_IPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_IPActionPerformed

    private void jTextField_CodAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_CodAgenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_CodAgenteActionPerformed

    private boolean isPositiveInteger(String str) {
        try {
            int x = Integer.parseInt( str );
            if(x>0)return true;
            else return false;
        }
        catch( Exception e ) {
            return false;
        }
    }
    
    private boolean checkChiaveCesare(String key){
       //La chiave deve essere un numero positivo
      return !(key.isEmpty() || !isPositiveInteger(key));
    }
    
    private  boolean checkOnlyLettereMin(String str){
      for(int i=0;i<str.length();i++){
        if(str.charAt(i)<'a' || str.charAt(i)>'z' ){
          return false;
        }
      }
      return true;
    }
    
    private boolean checkChiaveVigenère(String key){
       //La chiave deve essere una parola di 5 caratteri composta da caratteri minuscoli compresi fra la a e la z
      return !(key.isEmpty() || key.length()!=5 || !checkOnlyLettereMin(key));
    }    
    private void jButton_invioMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_invioMesActionPerformed

            
            String testo="";
            String testocifrato="";
            int chiave = 0;
            int codiceAgente=0;
            int porta;
            String chiave_vigenere="";
            //byte[] buffer = new byte[1024];
            InetAddress ip;
            DatagramPacket dp_tx;
            DatagramSocket s; // modella una socket UDP
            boolean valuesGood=true;

            jTextField_IP.setBorder(borderNormal);
            jTextField_Porta.setBorder(borderNormal);
            jTextField_CodAgente.setBorder(borderNormal);
            jTextField_Chiave.setBorder(borderNormal);
            jTextArea_Messaggio.setBorder(borderNormal);
            
            if(jRadioButton_Cesare.isSelected() || jRadioButton_Vigenere.isSelected() ){
              if(jRadioButton_Cesare.isSelected()){  
                try{
                  codiceAgente = Integer.parseInt(jTextField_CodAgente.getText().trim());
                  chiave = Integer.parseInt(jTextField_Chiave.getText().trim());
                  testo = jTextArea_Messaggio.getText();
                  if(testo.length()>MAX_CARAT){
                    valuesGood=false;
                    jTextArea_Messaggio.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Testo troppo lungo.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }
                  if(testo.isEmpty()){
                    valuesGood=false;
                    jTextArea_Messaggio.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Inserisci del testo.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }                  
                  if(jTextField_CodAgente.getText().trim().length()!=4 || codiceAgente<0){
                    valuesGood=false;
                    jTextField_CodAgente.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Codice agente non valido. Deve essere un numero intero di 4 cifre.", "Errore",JOptionPane.ERROR_MESSAGE);                  
                  }
                  if(!checkChiaveCesare(""+chiave)){
                    valuesGood=false;
                    jTextField_Chiave.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Chiave non valida. Per la codifica di cesare deve essere un numero positivo maggiore di 0", "Errore",JOptionPane.ERROR_MESSAGE);                    
                  }
                  //Se non ci sono errori in i/o invio mes
                  if(valuesGood){
                    testo = jTextField_CodAgente.getText().trim()+": "+jTextArea_Messaggio.getText().trim(); 
                    System.out.println(testo);
                    System.out.println(chiave);
                    testocifrato=""+cifrario.CifrarioCesare(testo, chiave);
                    System.out.println("Testo cifrato: "+testocifrato);
                    System.out.println(testocifrato.getBytes());
                    System.out.println(testocifrato.getBytes().length);
                    //System.out.println(Integer.parseInt(jTextField_Porta.getName().trim()));
                    //Invio mes criptato
                    try{
                        ip = InetAddress.getByName(jTextField_IP.getText().trim());
                        porta = Integer.parseInt(jTextField_Porta.getText().trim());                        
                        dp_tx = new DatagramPacket(testocifrato.getBytes(),testocifrato.getBytes().length,ip,porta); //classe che incapsula il datagramma UDP. Crea il pacchetto da inviare
                        s = new DatagramSocket();
                        //System.out.println("Sto per inviare");
                        s.send(dp_tx);// spedisco il pacchetto atraverso la socket
                        s.close();
                        JOptionPane.showMessageDialog(this, "Messaggio criptato ed inviato", "Informazione",JOptionPane.INFORMATION_MESSAGE);                    
                    }
                    catch(IOException | HeadlessException e){
                        System.out.println("Impossibile inviare il messaggio");
                        JOptionPane.showMessageDialog(this, "Impossibile inviare il messaggio.\nControlla l'ip e la porta inseriti", "Errore",JOptionPane.ERROR_MESSAGE);  
                    }
                  }
                }catch(Exception e){
                  if(codiceAgente<0){
                      jTextField_CodAgente.setBorder(borderError);
                      JOptionPane.showMessageDialog(this, "Codice agente non valido. Deve essere un numero intero di 4 cifre.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }
                  if(chiave<=0){
                      JOptionPane.showMessageDialog(this, "Chiave non valida. Per la codifica di cesare deve essere un numero positivo maggiore di 0.", "Errore",JOptionPane.ERROR_MESSAGE);
                      jTextField_Chiave.setBorder(borderError);
                  }
                }              
              }
            else{//Vingère
                try{
                  codiceAgente = Integer.parseInt(jTextField_CodAgente.getText().trim());
                  chiave_vigenere = jTextField_Chiave.getText().trim();
                  testo = jTextArea_Messaggio.getText();

                  if(testo.length()>MAX_CARAT){
                    valuesGood=false;
                    jTextArea_Messaggio.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Testo troppo lungo.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }
                  if(testo.isEmpty()){
                    valuesGood=false;
                    jTextArea_Messaggio.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Inserisci del testo.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }                  
                  if(jTextField_CodAgente.getText().trim().length()!=4 || codiceAgente<0){
                    valuesGood=false;
                    jTextField_CodAgente.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Codice agente non valido. Deve essere un numero intero di 4 cifre.", "Errore",JOptionPane.ERROR_MESSAGE);                  
                  }
                  if(!checkChiaveVigenère(chiave_vigenere)){
                    valuesGood=false;
                    jTextField_Chiave.setBorder(borderError);
                    JOptionPane.showMessageDialog(this, "Chiave non valida. La chiave deve essere una parola di 5 caratteri\ncontenente solo caratteri minuscoli che vanno dalla a alla z", "Errore",JOptionPane.ERROR_MESSAGE);                     
                  }

                  //Se non ci sono errori in i/o invio mes
                  if(valuesGood){
                    testo = jTextField_CodAgente.getText().trim()+": "+jTextArea_Messaggio.getText().trim();
                    System.out.println(testo);
                    System.out.println(chiave_vigenere);
                    testocifrato=cifrario.CifrarioVigenere(testo, chiave_vigenere);
                    System.out.println(testocifrato);
                    System.out.println(testocifrato.getBytes());
                    System.out.println(testocifrato.getBytes().length);
                    //System.out.println(Integer.parseInt(jTextField_Porta.getName().trim()));
                    try{
                        ip = InetAddress.getByName(jTextField_IP.getText().trim());
                        porta = Integer.parseInt(jTextField_Porta.getText().trim());                        
                        dp_tx = new DatagramPacket(testocifrato.getBytes(),testocifrato.getBytes().length,ip,porta); //classe che incapsula il datagramma UDP. Crea il pacchetto da inviare
                        s = new DatagramSocket();
                        s.send(dp_tx);// spedisco il pacchetto atraverso la socket
                        s.close();
                        JOptionPane.showMessageDialog(this, "Messaggio criptato ed inviato", "Informazione",JOptionPane.INFORMATION_MESSAGE);                    
                    }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Impossibile inviare il messaggio.\nControlla l'ip e la porta inseriti", "Errore",JOptionPane.ERROR_MESSAGE);  
                    }
                  }
                }catch(Exception e){
                  if(codiceAgente<0){
                      jTextField_CodAgente.setBorder(borderError);
                      JOptionPane.showMessageDialog(this, "Codice agente non valido. Deve essere un numero intero di 4 cifre.", "Errore",JOptionPane.ERROR_MESSAGE);
                  }
                  if(chiave_vigenere.isEmpty()){
                      JOptionPane.showMessageDialog(this, "Chiave non valida. Per la codifica di Vigenère deve essere inserita una parola di 5 caratteri.", "Errore",JOptionPane.ERROR_MESSAGE);
                      jTextField_Chiave.setBorder(borderError);
                  }
                }    
              }
            }  
            else{
              JOptionPane.showMessageDialog(this, "Scegli un algoritmo di cifratura.", "Errore",JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jButton_invioMesActionPerformed

    private void jTextArea_MessaggioCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextArea_MessaggioCaretUpdate
        // TODO add your handling code here:
        if(jTextArea_Messaggio.getText().length()>MAX_CARAT)jLabel_caratIns.setForeground(Color.red);
        else jLabel_caratIns.setForeground(Color.black);
      jLabel_caratIns.setText(jTextArea_Messaggio.getText().length()+"/"+MAX_CARAT);
    }//GEN-LAST:event_jTextArea_MessaggioCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CifrarioClient_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CifrarioClient_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CifrarioClient_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CifrarioClient_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CifrarioClient_GUI().setVisible(true);
            }
        });
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_invioMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Chiave;
    private javax.swing.JLabel jLabel_CodAgente;
    private javax.swing.JLabel jLabel_IP;
    private javax.swing.JLabel jLabel_Porta;
    private javax.swing.JLabel jLabel_Titolo;
    private javax.swing.JLabel jLabel_caratIns;
    private javax.swing.JRadioButton jRadioButton_Cesare;
    private javax.swing.JRadioButton jRadioButton_Vigenere;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea_Messaggio;
    private javax.swing.JTextField jTextField_Chiave;
    private javax.swing.JTextField jTextField_CodAgente;
    private javax.swing.JTextField jTextField_IP;
    private javax.swing.JTextField jTextField_Porta;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
